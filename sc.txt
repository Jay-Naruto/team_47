use anchor_lang::prelude::*;
pub mod constant;
pub mod error;
pub mod states;
use crate::{constant::*,error::*,states::*};
// This is your program's public key and it will update
// automatically when you build the project.
declare_id!("9i6gk7BuDd2Q4Xrx5ntQ8qiP95iRjLvEMApShpQNQaYJ");

#[program]
mod clever_todo {
    use super::*;
    pub fn initialize(
        ctx: Context<InitializeUser>
    ) -> Result<()> {
        let user_profile=&mut ctx.accounts.user_profile;
        let authority=&mut ctx.accounts.authority;
        user_profile.todo_count=0;
        user_profile.last_todo=0;
        user_profile.authority=authority.key();
            
        
        Ok(())
    }
    pub fn add_todo(
        ctx: Context<AddTodo>,
        content:String
    ) -> Result<()> {
        let todo_account=&mut ctx.accounts.todo_account;
        let user_profile=&mut ctx.accounts.user_profile;
        let authority=&mut ctx.accounts.authority;
        todo_account.content=content;
        todo_account.idx=user_profile.last_todo;
        todo_account.marked=false;
        todo_account.authority=authority.key();


        //increment
        user_profile.last_todo=user_profile.last_todo
        .checked_add(1)
        .unwrap();
        //increment
        user_profile.todo_count=user_profile.todo_count
        .checked_add(1)
        .unwrap();
        
        Ok(())
    }


    pub fn mark_todo(ctx:Context<MarkTodo>,
                    todo_idx:u8)->Result<()>
        {
        let todo_account=&mut ctx.accounts.todo_account;
        require!(!todo_account.marked, TodoError::AlreadyMarked);
        todo_account.marked=true;
        Ok(())
         
        }
     pub fn remove_todo(ctx:Context<RemoveTodo>,
                    todo_idx:u8)->Result<()>
        {
            //Decrement todo not DELETE cuz Blockchain
        let user_profile=&mut ctx.accounts.user_profile; 
        user_profile.todo_count=user_profile.todo_count
        .checked_sub(1)
        .unwrap();
        Ok(())
         
        }
}

#[derive(Accounts)]
#[instruction()]
pub struct InitializeUser<'info> {
    #[account(init, 
              seeds=[USER_TAG,authority.key().as_ref()],
              bump,
              payer = authority,
              space = 8 + std::mem::size_of::<UserProfile>())]
    pub user_profile: Box<Account<'info, UserProfile>>,
    #[account(mut)]
    pub authority: Signer<'info>,
    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
#[instruction()]
pub struct AddTodo<'info> {

    #[account(mut,
               seeds=[USER_TAG,authority.key().as_ref()],
              bump,
              has_one = authority,
             )]
    pub user_profile: Box<Account<'info, UserProfile>>,
    #[account(init, 
              seeds=[TODO_TAG,authority.key().as_ref(),&[user_profile.last_todo as u8].as_ref()],
              bump,
              payer = authority,
              space = 8 + std::mem::size_of::<TodoAccount>())]
    pub todo_account: Box<Account<'info, TodoAccount>>,
    #[account(mut)]
    pub authority: Signer<'info>,
    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
#[instruction(todo_idx:u8)]
pub struct MarkTodo<'info> {

    #[account(mut,
               seeds=[USER_TAG,authority.key().as_ref()],
              bump,
              has_one = authority,
             )]
    pub user_profile: Box<Account<'info, UserProfile>>,
    #[account(mut, 
              seeds=[TODO_TAG,authority.key().as_ref(),&[todo_idx].as_ref()],
              bump,
              has_one = authority,
             )]
    pub todo_account: Box<Account<'info, TodoAccount>>,
    #[account(mut)]
    pub authority: Signer<'info>,
    pub system_program: Program<'info, System>,
}



#[derive(Accounts)]
#[instruction(todo_idx:u8)]
pub struct RemoveTodo<'info> {

    #[account(mut,
               seeds=[USER_TAG,authority.key().as_ref()],
              bump,
              has_one = authority,
             )]
    pub user_profile: Box<Account<'info, UserProfile>>,
    #[account(mut, 
              close=authority,
              seeds=[TODO_TAG,authority.key().as_ref(),&[todo_idx].as_ref()],
              
              bump,
              has_one = authority,
             )]
    pub todo_account: Box<Account<'info, TodoAccount>>,
    #[account(mut)]
    pub authority: Signer<'info>,
    pub system_program: Program<'info, System>,
}






use anchor_lang::prelude::*;

#[error_code]
pub enum TodoError{
   #[msg("Not authorized")]
    Unauthorized,
    #[msg("Math operation overflow")]
    MathOverflow,
    #[msg("Already marked")]
    AlreadyMarked,
}





use anchor_lang::prelude::*;
#[account]
#[derive(Default)]
pub struct UserProfile {
    pub authority:Pubkey,
    pub last_todo:u8,
    pub todo_count:u8
}
#[account]
#[derive(Default)]
pub struct TodoAccount {
    pub authority:Pubkey,
    pub content:String,
    pub idx:u8,
    pub marked:bool
}







use anchor_lang::prelude::*;

#[constant]
pub const USER_TAG:&[u8] = b"USER_STATE";
pub const TODO_TAG:&[u8] = b"TODO_STATE";
